@page "/products/edit/{id:int}"
@inject AppDbContext _context
@inject NavigationManager _navigationManager

<h1>@model.Title</h1>

<EditForm Model="model" OnValidSubmit="@HandleSubmitAsync">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="mb-3">
		<label for="Title" class="form-label">Título</label>
		<InputText class="form-control" type="text" id="Title" @bind-Value="model.Title"></InputText>
	</div>
	<div class="mb-3">
		<label for="Price" class="form-label">Preço</label>
		<InputNumber class="form-control" type="number" id="Price" @bind-Value="model.Price"></InputNumber>
	</div>
	<div class="mb-3">
		<label for="CategoryId" class="form-label">Categorias</label>
		<InputSelect id="CategoryId" class="form-control" @bind-Value="model.CategoryId">
			@foreach (var category in _categories)
			{
				<option value="@category.Id">
					@category.Title
				</option>
			}
		</InputSelect>
	</div>
	@if (!string.IsNullOrEmpty(errorMessage))
	{
		<div class="alert alert-success">
			@errorMessage
		</div>
	}
	<div class="row">
		<div class="col-md-10">
			<button class="btn btn-primary col-md-2" type="submit">
				Salvar
			</button>
			<a href="/products" class="btn btn-secondary col-md-2" style="padding-left: 10px">
				Voltar
			</a>
		</div>
	</div>
</EditForm>

@code {

	[Parameter]
	public int Id { get; set; }

	private Product model = new();
	private List<Category> _categories = new();
	string? errorMessage = null;

	protected override async Task OnInitializedAsync()
	{
		_categories = await _context.Categories.ToListAsync();
		model = await _context.Products
			.AsNoTracking()
			.FirstOrDefaultAsync(s => s.Id == Id);
	}

	private async Task HandleSubmitAsync()
	{
		try
		{
			var prod = await _context.Products.FirstOrDefaultAsync(c => c.Id == Id);
			if (prod is null)
				throw new Exception("Produto não encontrado.");

			prod.Title = model.Title;
			prod.Price = model.Price;
			prod.CategoryId = model.CategoryId;

			_context.Products.Update(prod);
			await _context.SaveChangesAsync();
			_navigationManager.NavigateTo("/products");
		}
		catch (Exception ex)
		{
			errorMessage = ex.Message;
		}
	}

}