@page "/products/create"
@inject AppDbContext _context
@inject NavigationManager _navigationManager

<h1>Novo Produto</h1>

<EditForm Model="_model" OnValidSubmit="@HandleSubmitAsync">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="mb-3">
		<label for="Title" class="form-label">Título</label>
		<InputText class="form-control" type="text" id="Title" @bind-Value="_model.Title"></InputText>
	</div>
	<div class="mb-3">
		<label for="Price" class="form-label">Preço</label>
		<InputNumber class="form-control" type="number" id="Price" @bind-Value="_model.Price"></InputNumber>
	</div>
	<div class="mb-3">
		<label for="CategoryId" class="form-label">Categorias</label>
		<InputSelect id="CategoryId" class="form-control" @bind-Value="_model.CategoryId">
			@foreach (var category in _categories)
			{
				<option value="@category.Id">
					@category.Title
				</option>
			}
		</InputSelect>
	</div>
	@if(!string.IsNullOrEmpty(errorMessage))
	{
		<div class="alert alert-success">
			@errorMessage
		</div>
	}
	<button class="btn btn-primary" type="submit">
		Salvar
	</button>
</EditForm>

@code {

	private Product _model = new();
	private List<Category> _categories = new();
	string? errorMessage = null;

	protected override async Task OnInitializedAsync()
	{
		_categories = _context.Categories.ToList();
		_model.CategoryId = _categories[0].Id;
	}

	private async Task HandleSubmitAsync()
	{
		try
		{
			await _context.Products.AddAsync(_model);
			await _context.SaveChangesAsync();
			_navigationManager.NavigateTo("/products");
		}
		catch(Exception ex)
		{
			errorMessage = ex.Message;
		}
	}

}